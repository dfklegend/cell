// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cellrpc.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type RPCRequest struct {
	// 客户端id
	ReqId                uint32   `protobuf:"varint,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Method               string   `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	NeedAck              bool     `protobuf:"varint,5,opt,name=needAck,proto3" json:"needAck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCRequest) Reset()         { *m = RPCRequest{} }
func (m *RPCRequest) String() string { return proto.CompactTextString(m) }
func (*RPCRequest) ProtoMessage()    {}
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80dfdbca213140b8, []int{0}
}

func (m *RPCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCRequest.Unmarshal(m, b)
}
func (m *RPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCRequest.Marshal(b, m, deterministic)
}
func (m *RPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRequest.Merge(m, src)
}
func (m *RPCRequest) XXX_Size() int {
	return xxx_messageInfo_RPCRequest.Size(m)
}
func (m *RPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRequest proto.InternalMessageInfo

func (m *RPCRequest) GetReqId() uint32 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *RPCRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *RPCRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RPCRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RPCRequest) GetNeedAck() bool {
	if m != nil {
		return m.NeedAck
	}
	return false
}

// The normal response message
type RPCReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCReply) Reset()         { *m = RPCReply{} }
func (m *RPCReply) String() string { return proto.CompactTextString(m) }
func (*RPCReply) ProtoMessage()    {}
func (*RPCReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_80dfdbca213140b8, []int{1}
}

func (m *RPCReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCReply.Unmarshal(m, b)
}
func (m *RPCReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCReply.Marshal(b, m, deterministic)
}
func (m *RPCReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCReply.Merge(m, src)
}
func (m *RPCReply) XXX_Size() int {
	return xxx_messageInfo_RPCReply.Size(m)
}
func (m *RPCReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCReply.DiscardUnknown(m)
}

var xxx_messageInfo_RPCReply proto.InternalMessageInfo

type Dummy struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dummy) Reset()         { *m = Dummy{} }
func (m *Dummy) String() string { return proto.CompactTextString(m) }
func (*Dummy) ProtoMessage()    {}
func (*Dummy) Descriptor() ([]byte, []int) {
	return fileDescriptor_80dfdbca213140b8, []int{2}
}

func (m *Dummy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dummy.Unmarshal(m, b)
}
func (m *Dummy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dummy.Marshal(b, m, deterministic)
}
func (m *Dummy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dummy.Merge(m, src)
}
func (m *Dummy) XXX_Size() int {
	return xxx_messageInfo_Dummy.Size(m)
}
func (m *Dummy) XXX_DiscardUnknown() {
	xxx_messageInfo_Dummy.DiscardUnknown(m)
}

var xxx_messageInfo_Dummy proto.InternalMessageInfo

type PullAckRequest struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullAckRequest) Reset()         { *m = PullAckRequest{} }
func (m *PullAckRequest) String() string { return proto.CompactTextString(m) }
func (*PullAckRequest) ProtoMessage()    {}
func (*PullAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_80dfdbca213140b8, []int{3}
}

func (m *PullAckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullAckRequest.Unmarshal(m, b)
}
func (m *PullAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullAckRequest.Marshal(b, m, deterministic)
}
func (m *PullAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullAckRequest.Merge(m, src)
}
func (m *PullAckRequest) XXX_Size() int {
	return xxx_messageInfo_PullAckRequest.Size(m)
}
func (m *PullAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullAckRequest proto.InternalMessageInfo

func (m *PullAckRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type RPCAcks struct {
	Ack                  []*RPCAck `protobuf:"bytes,1,rep,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RPCAcks) Reset()         { *m = RPCAcks{} }
func (m *RPCAcks) String() string { return proto.CompactTextString(m) }
func (*RPCAcks) ProtoMessage()    {}
func (*RPCAcks) Descriptor() ([]byte, []int) {
	return fileDescriptor_80dfdbca213140b8, []int{4}
}

func (m *RPCAcks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCAcks.Unmarshal(m, b)
}
func (m *RPCAcks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCAcks.Marshal(b, m, deterministic)
}
func (m *RPCAcks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCAcks.Merge(m, src)
}
func (m *RPCAcks) XXX_Size() int {
	return xxx_messageInfo_RPCAcks.Size(m)
}
func (m *RPCAcks) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCAcks.DiscardUnknown(m)
}

var xxx_messageInfo_RPCAcks proto.InternalMessageInfo

func (m *RPCAcks) GetAck() []*RPCAck {
	if m != nil {
		return m.Ack
	}
	return nil
}

type RPCAck struct {
	ReqId                uint32   `protobuf:"varint,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCAck) Reset()         { *m = RPCAck{} }
func (m *RPCAck) String() string { return proto.CompactTextString(m) }
func (*RPCAck) ProtoMessage()    {}
func (*RPCAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_80dfdbca213140b8, []int{5}
}

func (m *RPCAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCAck.Unmarshal(m, b)
}
func (m *RPCAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCAck.Marshal(b, m, deterministic)
}
func (m *RPCAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCAck.Merge(m, src)
}
func (m *RPCAck) XXX_Size() int {
	return xxx_messageInfo_RPCAck.Size(m)
}
func (m *RPCAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCAck.DiscardUnknown(m)
}

var xxx_messageInfo_RPCAck proto.InternalMessageInfo

func (m *RPCAck) GetReqId() uint32 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *RPCAck) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RPCAck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*RPCRequest)(nil), "cellrpcprotos.RPCRequest")
	proto.RegisterType((*RPCReply)(nil), "cellrpcprotos.RPCReply")
	proto.RegisterType((*Dummy)(nil), "cellrpcprotos.Dummy")
	proto.RegisterType((*PullAckRequest)(nil), "cellrpcprotos.PullAckRequest")
	proto.RegisterType((*RPCAcks)(nil), "cellrpcprotos.RPCAcks")
	proto.RegisterType((*RPCAck)(nil), "cellrpcprotos.RPCAck")
}

func init() { proto.RegisterFile("cellrpc.proto", fileDescriptor_80dfdbca213140b8) }

var fileDescriptor_80dfdbca213140b8 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6f, 0xda, 0x30,
	0x14, 0xc7, 0xf1, 0xb2, 0x40, 0x78, 0x13, 0x9b, 0x64, 0x31, 0xc8, 0x98, 0x26, 0x45, 0xb9, 0x2c,
	0x87, 0x29, 0x48, 0xec, 0xb8, 0x13, 0x64, 0x87, 0x72, 0xa9, 0x22, 0xf7, 0x50, 0xa9, 0x37, 0xea,
	0xbc, 0x02, 0x8a, 0x83, 0x83, 0x1d, 0xda, 0xf2, 0x2f, 0x54, 0xea, 0xff, 0x5c, 0x39, 0x3f, 0x2a,
	0xd2, 0xd2, 0x53, 0xfc, 0xd1, 0xf7, 0xc5, 0xfa, 0x7e, 0x9e, 0x0c, 0x03, 0x8e, 0x42, 0xa8, 0x9c,
	0x87, 0xb9, 0x92, 0x85, 0xa4, 0x0d, 0x96, 0xa4, 0xfd, 0x27, 0x02, 0xc0, 0xe2, 0x88, 0xe1, 0xfe,
	0x80, 0xba, 0xa0, 0x43, 0xb0, 0x15, 0xee, 0x97, 0x89, 0x4b, 0x3c, 0x12, 0x0c, 0x58, 0x05, 0x74,
	0x02, 0x0e, 0x17, 0x5b, 0xdc, 0x15, 0xcb, 0xc4, 0xfd, 0xe4, 0x91, 0xa0, 0xcf, 0x5e, 0x99, 0x8e,
	0xa0, 0x9b, 0x61, 0xb1, 0x91, 0x89, 0x6b, 0x95, 0x49, 0x4d, 0xd4, 0x85, 0x5e, 0x86, 0x5a, 0xaf,
	0xd6, 0xe8, 0x7e, 0x2e, 0x83, 0x06, 0x4d, 0xb2, 0x43, 0x4c, 0xe6, 0x3c, 0x75, 0x6d, 0x8f, 0x04,
	0x0e, 0x6b, 0xd0, 0x07, 0x70, 0xca, 0x2e, 0xb9, 0x38, 0xfa, 0x3d, 0xb0, 0xff, 0x1f, 0xb2, 0xec,
	0xe8, 0xff, 0x81, 0xaf, 0xf1, 0x41, 0x88, 0x39, 0x4f, 0x9b, 0x92, 0xa7, 0x75, 0x48, 0xbb, 0x8e,
	0x3f, 0x83, 0x1e, 0x8b, 0xa3, 0x39, 0x4f, 0x35, 0xfd, 0x0d, 0xd6, 0x8a, 0xa7, 0x2e, 0xf1, 0xac,
	0xe0, 0xcb, 0xec, 0x7b, 0xd8, 0xf2, 0x0e, 0xab, 0x21, 0x66, 0x26, 0xfc, 0x4b, 0xe8, 0x56, 0xf8,
	0x81, 0xfe, 0x10, 0x6c, 0x54, 0x4a, 0xaa, 0xda, 0xbd, 0x82, 0x53, 0x41, 0xab, 0x25, 0x38, 0x7b,
	0x26, 0xd0, 0x67, 0x71, 0x74, 0x85, 0xea, 0x1e, 0x15, 0xfd, 0x07, 0x16, 0x8b, 0x23, 0xfa, 0xe3,
	0x7d, 0x81, 0xda, 0x67, 0x32, 0x3e, 0x17, 0x99, 0x1d, 0x74, 0x68, 0x04, 0x4e, 0x2d, 0xaf, 0xe9,
	0xaf, 0x37, 0x63, 0xed, 0xad, 0x4c, 0x46, 0x67, 0x0d, 0xb5, 0xdf, 0x59, 0x2c, 0xe1, 0xe7, 0x56,
	0x86, 0x6b, 0xf3, 0x06, 0xf0, 0x71, 0x95, 0xe5, 0x02, 0x75, 0xb8, 0x41, 0x21, 0xe4, 0x83, 0x54,
	0x22, 0x59, 0x7c, 0xbb, 0x30, 0xe7, 0x6b, 0x73, 0x8e, 0xcd, 0xaf, 0x31, 0xb9, 0x19, 0x27, 0x77,
	0x69, 0xc8, 0x65, 0x36, 0x35, 0x57, 0x4e, 0x55, 0xce, 0xa7, 0xd5, 0xa5, 0xb7, 0xdd, 0xf2, 0xfb,
	0xf7, 0x25, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x99, 0x81, 0x01, 0x55, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCServerClient is the client API for RPCServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCServerClient interface {
	// Sends a greeting
	RPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCReply, error)
	PullAcks(ctx context.Context, in *PullAckRequest, opts ...grpc.CallOption) (*RPCAcks, error)
}

type rPCServerClient struct {
	cc *grpc.ClientConn
}

func NewRPCServerClient(cc *grpc.ClientConn) RPCServerClient {
	return &rPCServerClient{cc}
}

func (c *rPCServerClient) RPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := c.cc.Invoke(ctx, "/cellrpcprotos.RPCServer/RPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServerClient) PullAcks(ctx context.Context, in *PullAckRequest, opts ...grpc.CallOption) (*RPCAcks, error) {
	out := new(RPCAcks)
	err := c.cc.Invoke(ctx, "/cellrpcprotos.RPCServer/PullAcks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServerServer is the server API for RPCServer service.
type RPCServerServer interface {
	// Sends a greeting
	RPC(context.Context, *RPCRequest) (*RPCReply, error)
	PullAcks(context.Context, *PullAckRequest) (*RPCAcks, error)
}

// UnimplementedRPCServerServer can be embedded to have forward compatible implementations.
type UnimplementedRPCServerServer struct {
}

func (*UnimplementedRPCServerServer) RPC(ctx context.Context, req *RPCRequest) (*RPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPC not implemented")
}
func (*UnimplementedRPCServerServer) PullAcks(ctx context.Context, req *PullAckRequest) (*RPCAcks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAcks not implemented")
}

func RegisterRPCServerServer(s *grpc.Server, srv RPCServerServer) {
	s.RegisterService(&_RPCServer_serviceDesc, srv)
}

func _RPCServer_RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServerServer).RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellrpcprotos.RPCServer/RPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServerServer).RPC(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCServer_PullAcks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServerServer).PullAcks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cellrpcprotos.RPCServer/PullAcks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServerServer).PullAcks(ctx, req.(*PullAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cellrpcprotos.RPCServer",
	HandlerType: (*RPCServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPC",
			Handler:    _RPCServer_RPC_Handler,
		},
		{
			MethodName: "PullAcks",
			Handler:    _RPCServer_PullAcks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cellrpc.proto",
}
