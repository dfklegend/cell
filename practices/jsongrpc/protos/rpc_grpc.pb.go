// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCServerClient is the client API for RPCServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCServerClient interface {
	// Sends a greeting
	RPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCReply, error)
}

type rPCServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCServerClient(cc grpc.ClientConnInterface) RPCServerClient {
	return &rPCServerClient{cc}
}

func (c *rPCServerClient) RPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCReply, error) {
	out := new(RPCReply)
	err := c.cc.Invoke(ctx, "/helloworld.RPCServer/RPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServerServer is the server API for RPCServer service.
// All implementations must embed UnimplementedRPCServerServer
// for forward compatibility
type RPCServerServer interface {
	// Sends a greeting
	RPC(context.Context, *RPCRequest) (*RPCReply, error)
	mustEmbedUnimplementedRPCServerServer()
}

// UnimplementedRPCServerServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServerServer struct {
}

func (UnimplementedRPCServerServer) RPC(context.Context, *RPCRequest) (*RPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPC not implemented")
}
func (UnimplementedRPCServerServer) mustEmbedUnimplementedRPCServerServer() {}

// UnsafeRPCServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServerServer will
// result in compilation errors.
type UnsafeRPCServerServer interface {
	mustEmbedUnimplementedRPCServerServer()
}

func RegisterRPCServerServer(s grpc.ServiceRegistrar, srv RPCServerServer) {
	s.RegisterService(&RPCServer_ServiceDesc, srv)
}

func _RPCServer_RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServerServer).RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.RPCServer/RPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServerServer).RPC(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCServer_ServiceDesc is the grpc.ServiceDesc for RPCServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.RPCServer",
	HandlerType: (*RPCServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPC",
			Handler:    _RPCServer_RPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
